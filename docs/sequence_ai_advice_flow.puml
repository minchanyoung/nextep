@startuml NEXTEP_AI_Advice_Sequence

title NEXTEP.AI AI 조언 및 채팅 시스템 - Sequence Diagram

actor "사용자" as User
participant "웹 브라우저" as Browser  
participant "Flask App" as App
participant "Main Routes" as MainRoutes
participant "Services" as Services
participant "LLM Service" as LLMService
participant "RAG Manager" as RAGManager
participant "Prompt Templates" as PromptTemplates
participant "ChromaDB" as VectorDB
participant "Ollama LLM" as LLM
participant "Chat Session" as ChatSession
participant "Oracle DB" as Database

== AI 조언 페이지 접근 ==
User -> Browser: AI 조언 받기 클릭
Browser -> App: GET/POST /advice

App -> MainRoutes: advice()
MainRoutes -> MainRoutes: get_current_user()

alt 비회원인 경우 (POST)
    MainRoutes -> MainRoutes: extract form_data
    MainRoutes -> Services: run_prediction(form_data)
    Services --> MainRoutes: prediction_results
else 회원인 경우 (GET)
    MainRoutes -> MainRoutes: get_prediction_data()
    MainRoutes --> MainRoutes: cached prediction_results
end

== 초기 AI 조언 생성 ==
MainRoutes -> Services: generate_career_advice_hf()
Services -> Services: get_rag_manager()
Services -> Services: build comprehensive_query

Services -> RAGManager: get_career_advice(query)
RAGManager -> VectorDB: similarity_search()
VectorDB --> RAGManager: 관련 문서 chunks
RAGManager -> PromptTemplates: get_rag_system_prompt()
PromptTemplates --> RAGManager: RAG 프롬프트
RAGManager -> LLM: LangChain RAG 체인 실행
LLM --> RAGManager: RAG 기반 컨텍스트
RAGManager --> Services: rag_context

Services -> PromptTemplates: get_career_advice_prompt()
PromptTemplates --> Services: 초기 조언 프롬프트
Services -> LLMService: chat()
LLMService -> LLM: Ollama API 호출
LLM --> LLMService: AI 조언 텍스트
LLMService --> Services: career_advice
Services --> MainRoutes: ai_advice

MainRoutes -> Services: summarize_context()
Services --> MainRoutes: context_summary

alt 회원인 경우
    MainRoutes -> ChatSession: get_current_chat_session()
    ChatSession --> MainRoutes: chat_session
    MainRoutes -> ChatSession: set_user_context()
    MainRoutes -> ChatSession: add_message("assistant", context_summary)
    MainRoutes -> ChatSession: add_message("assistant", ai_advice)
    MainRoutes -> MainRoutes: save to session['chat_messages']
end

MainRoutes -> App: render advice.html
App -> Browser: AI 조언 페이지 + 초기 조언
Browser -> Browser: showInitialMessageWithTyping()
Browser --> User: 타이핑 효과로 AI 조언 표시

== 사용자 추가 질문 ==
User -> Browser: 추가 질문 입력 및 전송
Browser -> App: POST /ask-ai
App -> MainRoutes: ask_ai()
MainRoutes -> MainRoutes: get_json()

alt 회원인 경우
    MainRoutes -> ChatSession: get_current_chat_session()
    ChatSession --> MainRoutes: context_summary
    MainRoutes -> ChatSession: add_message("user", user_message)
else 비회원인 경우
    MainRoutes -> MainRoutes: context_summary = "비회원 사용자"
end

MainRoutes -> Services: generate_follow_up_advice()
Services -> Services: get_rag_manager()
Services -> RAGManager: get_career_advice(user_message)
RAGManager -> VectorDB: 추가 문서 검색
VectorDB --> RAGManager: 관련 정보
RAGManager --> Services: additional_context

Services -> PromptTemplates: get_follow_up_system_prompt()
PromptTemplates --> Services: 후속 질문 프롬프트
Services -> LLMService: LangChain 체인 실행
LLMService -> LLM: 컨텍스트 + 질문 처리
LLM --> LLMService: AI 답변
LLMService --> Services: reply
Services --> MainRoutes: follow_up_advice

alt 회원인 경우
    MainRoutes -> ChatSession: add_message("assistant", reply)
    MainRoutes -> MainRoutes: update session['chat_messages']
end

MainRoutes -> App: JSON response
App -> Browser: {"reply": "..."}
Browser -> Browser: addMessageToChat()
Browser --> User: AI 답변 표시

== 스트리밍 응답 (옵션) ==
User -> Browser: 스트리밍 모드 질문
Browser -> App: POST /ask-ai-stream  
App -> MainRoutes: ask_ai_stream()
MainRoutes -> Services: generate_follow_up_advice_stream()

Services -> LLMService: chat_stream()
loop 스트리밍 청크
    LLMService -> LLM: 스트리밍 요청
    LLM --> LLMService: chunk
    LLMService --> Services: chunk
    Services --> MainRoutes: yield chunk
    MainRoutes -> App: SSE data: chunk
    App -> Browser: EventSource 수신
    Browser -> Browser: 실시간 텍스트 추가
    Browser --> User: 실시간 답변 표시
end

== 대화기록 초기화 ==
User -> Browser: 대화기록 초기화 버튼 클릭
Browser -> Browser: 확인 대화상자
User -> Browser: 확인
Browser -> App: POST /chat/new
App -> MainRoutes: new_chat()
MainRoutes -> ChatSession: clear_chat_session()
ChatSession -> ChatSession: 세션 데이터 초기화
ChatSession --> MainRoutes: success
MainRoutes -> App: JSON success
App -> Browser: 성공 응답
Browser -> Browser: 화면 초기화 및 AI 조언 재생성
Browser --> User: 새로운 상담 시작

note over User, LLM: LLM은 통합 페르소나 시스템 사용\n상황별 맞춤 프롬프트로 일관된 전문성 제공

@enduml